*hurl.nvim.txt*          For NVIM v0.8.0         Last change: 2023 November 08

==============================================================================
Table of Contents                                *hurl.nvim-table-of-contents*

  - Features                                              |hurl.nvim-features|
  - Usage                                                    |hurl.nvim-usage|
  - Env File Support: vars.env          |hurl.nvim-env-file-support:-vars.env|
  - Default Key Mappings                      |hurl.nvim-default-key-mappings|
  - Configuration                                    |hurl.nvim-configuration|
  - Resources                                            |hurl.nvim-resources|
  - Credits                                                |hurl.nvim-credits|
  - Author                                                  |hurl.nvim-author|
  - Show your support                            |hurl.nvim-show-your-support|
Welcome to hurl.nvim üëãHurl.nvim is a Neovim plugin designed to run HTTP requests directly from `.hurl` files. Elevate your API development workflow by executing and viewing responses without leaving your editor.<https://www.youtube.com/watch?v=nr_RbHvnnwk>


FEATURES                                                  *hurl.nvim-features*

- üöÄ Execute HTTP requests directly from `.hurl` files.
- üëÅ‚Äçüó® Multiple display modes for API response: popup or split.
- üåà Highly customizable through Neovim settings.


USAGE                                                        *hurl.nvim-usage*

Add the following configuration to your Neovim setup:

>lua
      {
        "jellydn/hurl.nvim",
        dependencies = { "MunifTanjim/nui.nvim" },
        cmd = { "HurlRunner", "HurlRunnerAt", "HurlRunnerToEntry" },
        opts = {
          -- Show debugging info
          debug = false,
          -- Show response in popup or split
          mode = "popup",
        },
        keys = {
          -- Run API request
          { "<leader>A", "<cmd>HurlRunner<CR>", desc = "Run All requests" },
          { "<leader>a", "<cmd>HurlRunnerAt<CR>", desc = "Run Api request" },
          { "<leader>te", "<cmd>HurlRunnerToEntry<CR>", desc = "Run Api request to entry" },
          -- Run Hurl request in visual mode
          { "<leader>h", ":HurlRunner<CR>", desc = "Hurl Runner", mode = "v" },
        },
      }
    }
<


ENV FILE SUPPORT: VARS.ENV              *hurl.nvim-env-file-support:-vars.env*

`hurl.nvim` offers seamless integration with `vars.env` files to manage
environment variables for your HTTP requests.


FILE LOCATION ~

The plugin looks for a `vars.env` file in the following directories:

- Current file‚Äôs directory
- src/
- test/
- tests/
- server/
- src/tests/
- server/tests/

This makes it convenient to specify environment-specific variables that your
HTTP requests may use. ## Demo

Check out the following demos to see `hurl.nvim` in action:


RUN A FILE ~

Run the entire file by pressing `<leader>A` or run `HurlRunner` command.

<https://gyazo.com/e554e81788aad910848ff991c9369d7b>


RUN A SELECTION ~

Select a range of lines and press `<leader>h` to execute the request or run
`HurlRunner` command.

<https://gyazo.com/1a44dbbf165006fb5744c8f10883bb69>


RUN AT CURRENT LINE ~

Place your cursor on the line you want to run and press `<leader>a` or run
`HurlRunnerAt` command to execute the request. It need be one of the HTTP
methods listed: GET, POST, PUT, DELETE, PATCH.

<https://gyazo.com/20efd2cf3f73238bd57e79fc662208b1>


DEFAULT KEY MAPPINGS                          *hurl.nvim-default-key-mappings*

`hurl.nvim` comes with some default key mappings to streamline your workflow:

- `q`: Close the current popup window.
- `<C-n>`: Switch to the next popup window.
- `<C-p>`: Switch to the previous popup window.

These key mappings are active within the popup windows that `hurl.nvim`
displays.


CONFIGURATION                                        *hurl.nvim-configuration*

`hurl.nvim` can be customized with the following default configurations:

>lua
    local default_config = {
      -- Toggle debugging information
      debug = false, -- If true, logs will be saved at ~/.cache/nvim/hurl.nvim.log
    
      -- Set the display mode for the response: 'split' or 'popup'
      mode = 'split',
      split_position = "right",
      split_size = "50%",
    
      -- Default environment file name
      env_file = 'vars.env',
    
      -- Specify formatters for different response types
      formatters = {
        json = { 'jq' },  -- Uses jq to format JSON responses
        html = {
          'prettier',     -- Uses prettier to format HTML responses
          '--parser',
          'html',
        },
      },
    }
<

To apply these configurations, include them in your Neovim setup like this:

>lua
    require('hurl').setup({
      debug = true,          -- Enable to show detailed logs
      mode = 'popup',        -- Change to 'popup' to display responses in a popup window
      env_file = 'vars.env', -- Change this to use a different environment file name
      formatters = {
        json = { 'jq' },    -- Customize the JSON formatter command
        html = {
          'prettier',       -- Customize the HTML formatter command
          '--parser',
          'html',
        },
      },
    })
<

Adjust the settings as per your needs to enhance your development experience
with `hurl.nvim`.


TIPS ~

Logs are saved at `~/.cache/nvim/hurl.nvim.log` on macOS.


RESOURCES                                                *hurl.nvim-resources*

<https://www.youtube.com/watch?v=LP_RXe8cM_s>


CREDITS                                                    *hurl.nvim-credits*

- Hurl - Run and Test HTTP Requests <https://hurl.dev/>
- Inspired by ray-x/web-tools.nvim: Neovim plugin for web developers <https://github.com/ray-x/web-tools.nvim>
- Utilize MunifTanjim/nui.nvim: UI components for Neovim plugins and configurations <https://github.com/MunifTanjim/nui.nvim>


AUTHOR                                                      *hurl.nvim-author*

üë§ **Huynh Duc Dung**

- Website: https://productsway.com/
- Twitter: @jellydn <https://twitter.com/jellydn>
- Github: @jellydn <https://github.com/jellydn>


SHOW YOUR SUPPORT                                *hurl.nvim-show-your-support*

If this guide has been helpful, please give it a ‚≠êÔ∏è.

<https://ko-fi.com/dunghd> <https://paypal.me/dunghd>
<https://www.buymeacoffee.com/dunghd>

==============================================================================
1. Links                                                     *hurl.nvim-links*

1. *IT Man - Effortless APIs with Hurl.nvim: A Developer's Guide to Neovim Tooling [Vietnamese]*: https://i.ytimg.com/vi/nr_RbHvnnwk/hqdefault.jpg
2. *Run a file*: https://i.gyazo.com/e554e81788aad910848ff991c9369d7b.gif
3. *Selection*: https://i.gyazo.com/1a44dbbf165006fb5744c8f10883bb69.gif
4. *Run at current line*: https://i.gyazo.com/20efd2cf3f73238bd57e79fc662208b1.gif
5. *IT Man - Building and Testing a #Hapi Server with #Hurl: A Step-By-Step Demo [Vietnamese]*: https://i.ytimg.com/vi/LP_RXe8cM_s/mqdefault.jpg
6. *@jellydn*: 
7. *@jellydn*: 
8. *kofi*: https://img.shields.io/badge/Ko--fi-F16061?style=for-the-badge&logo=ko-fi&logoColor=white
9. *paypal*: https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&logo=paypal&logoColor=white
10. *buymeacoffee*: https://img.shields.io/badge/Buy_Me_A_Coffee-FFDD00?style=for-the-badge&logo=buy-me-a-coffee&logoColor=black

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
